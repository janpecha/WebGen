<?php
	/**
	 * @author		Jan Pecha, <janpecha@email.cz>
	 * @license		http://janpecha.iunas.cz/webgen/#license
	 * @link		http://janpecha.iunas.cz/
	 */

	require __DIR__ . '/libs/Nette/nette.min.php';
	require __DIR__ . '/libs/Texy/texy.min.php';
	require __DIR__ . '/libs/Webgen/FakePresenter.php';
	require __DIR__ . '/libs/Webgen/Generator.php';
	require __DIR__ . '/libs/Webgen/Texy.php';
	require __DIR__ . '/libs/Webgen/TexyFilter.php';
	require __DIR__ . '/libs/Webgen/FileTemplate.php';
	require __DIR__ . '/libs/Webgen/Webgen.php';
	require __DIR__ . '/libs/Webgen/Finder.php';
	require __DIR__ . '/libs/Webgen/Autoloading.php';
	require __DIR__ . '/libs/Cli/Cli.php';


	use Nette\Utils\Finder;

	date_default_timezone_set('Europe/Prague');
	set_time_limit(0);
	set_error_handler(function($severity, $message, $file, $line) {
		if (($severity & error_reporting()) === $severity) {
			\Cli\Cli::error("Error: $message in $file on $line");
			ob_flush();
			echo "\n\n";
			exit(2);
		}
		return FALSE;
	});
	set_exception_handler(function($e) {
		\Cli\Cli::error("Error: {$e->getMessage()} in {$e->getFile()} on {$e->getLine()}\n");
	});

	try
	{
		$params = \Cli\Cli::parseParams($_SERVER['argv']);

		if($params === FALSE || !isset($params['run']))
		{
?>

Webgen 2.1.0-dev
----------------
Usage:
	php -f webgen.phpc -- --run

Parameters:
	--run           enables generating [required]
	--force         regenerates all files (not only changed)
	--config        name of config file
	--dir           project directory (current working directory by default)
	--onedir        disables incremental mode

<?php
			exit;
		}

		$cwDir = getcwd();
		$dir = isset($params['dir']) ? $params['dir'] : $cwDir;
		$dir = \Cli\Cli::formatPath($dir, $cwDir);

		// Config
		$configPath = "$dir/" . (isset($params['config']) ? $params['config'] : 'config.neon');

		$defaultConfig = array(
			'input' => array(
				'layout' => '@layout.latte',	// name of layout file
				'dir' => 'input', // name of input directory
				'copy' => FALSE, // copy another (images, JS, CSS) files into output directory
				'libsDir' => 'libs', // name of libs directory, handled by RobotLoader
				'composerFile' => 'composer.json',
			),

			'output' => array(
				'dir' => 'output',	// name of output directory
				'ext' => 'html',	// output file extension
				'xhtml' => FALSE,	// enables or disables XHTML output
				'purge' => FALSE,   // purge output directory?
				'onedir' => TRUE,   // disables incremental generating
				'lastBuildInfo' => NULL, // generate last build info file?
				'cacheDir' => 'cache',
			),

			'variables' => array(
				'baseDir' => '',	// baseDir variable, etc. '/my_web_subdir'
			),
		);


		// Load NEON config
		\Cli\Cli::log('Load config...');
		$config = @file_get_contents($configPath); // intentionally @

		if(is_string($config))
		{
			$config = \Nette\Utils\Neon::decode($config);
		}
		else
		{
			\Cli\Cli::log('...config file not found.');
		}

		if(is_array($config))
		{
			//$config = $config + $defaultConfig;
			$userConfig = $config;
			$config = array();

			// Input configuration
			if(isset($userConfig['input']))
			{
				$config['input'] = $userConfig['input'] + $defaultConfig['input'];
			}
			else
			{
				$config['input'] = $defaultConfig['input'];
			}

			// Output configuration
			if(isset($userConfig['output']))
			{
				$config['output'] = $userConfig['output'] + $defaultConfig['output'];
			}
			else
			{
				$config['output'] = $defaultConfig['output'];
			}

			// Variables
			if(isset($userConfig['variables']))
			{
				$config['variables'] = $userConfig['variables'] + $defaultConfig['variables'];
			}
			else
			{
				$config['variables'] = $defaultConfig['variables'];
			}
		}
		else
		{
			$config = $defaultConfig;
		}


		// Settings
		if (isset($params['onedir'])) {
			$config['output']['onedir'] = TRUE;
		}

		if ($config['output']['lastBuildInfo'] === NULL /* auto */) {
			$config['output']['lastBuildInfo'] = !$config['output']['onedir'];
		}

		$inputDirectory = \Cli\Cli::formatPath($config['input']['dir'], $dir);
		$outputDirectory = \Cli\Cli::formatPath($config['output']['dir'], $dir);
		$layoutPath = \Cli\Cli::formatPath($config['input']['layout'], $dir);

		if(!is_file($layoutPath))
		{
			\Cli\Cli::error("\nError: File '$layoutPath' is not exists.\n\n");
			exit(10);
		}

		if(!is_dir($inputDirectory))
		{
			\Cli\Cli::error("\nError: Directory '$inputDirectory' is not exists.\n\n");
			exit(11);
		}


		// Autoloading
		$composerFile = is_string($config['input']['composerFile']) ? \Cli\Cli::formatPath($config['input']['composerFile'], $dir) : NULL;
		$libsDir = \Cli\Cli::formatPath($config['input']['libsDir'], $dir);
		$autoloading = new \Webgen\Autoloading($composerFile, $libsDir);
		$autoloading->autoload();

		if ($robotLoader = $autoloading->createRobotLoader()) {
			\Cli\Cli::log('Register RobotLoader...');
			\Cli\Cli::log('Scan dir: ' . $libsDir);

			$cacheDir = $config['output']['cacheDir'];

			if (is_string($cacheDir)) {
				$cacheDir = \Cli\Cli::formatPath($cacheDir, $dir);
				\Cli\Cli::log('Cache dir: ' . $cacheDir);

				// create cache dir
				if (!is_dir($cacheDir) && !@mkdir($cacheDir, 0777, TRUE)) {
					\Cli\Cli::error('Error: Create cache dir failed');
					$robotLoader->setCacheStorage(new \Nette\Caching\Storages\MemoryStorage);
				} else {
					$robotLoader->setCacheStorage(new \Nette\Caching\Storages\FileStorage($cacheDir));
				}
			} else {
				\Cli\Cli::log('No cache dir for RobotLoader');
			}

			$robotLoader->register();
		}


		// Generating
		\Cli\Cli::log('Generating...');

		$generator = new \Webgen\Generator;
		$generator->config = $config;
		$generator->inputDirectory = $inputDirectory;
		$generator->outputDirectory = $outputDirectory;
		$generator->layoutPath = $layoutPath;

		$finder = Finder::findFiles('*.texy', '*.latte');


		if(!isset($params['force']) && !$config['output']['onedir'])
		{
			$lastBuildDate = \Webgen\Generator::getLastBuildDate($dir . '/lastBuild.dat');

			if($lastBuildDate !== FALSE)
			{
				// kdyz nebyl od posledne zmenen layout => muzeme generovat jenom zmenene soubory, jinak vsechny
				if(filemtime($layoutPath) < $lastBuildDate->getTimestamp())	// TODO: nespolehat se na timestamp
				{
					\Cli\Cli::log('Mode: updating');
					$finder = $finder->date('>', $lastBuildDate);
				}
			}
		}


		// Make output directory
		\Cli\Cli::log("Preparing...");
		$generator->prepare(!$config['output']['onedir'], $config['output']['purge']);

		// Scanning & generating
		\Cli\Cli::log("Scanning...");

		$webgenHelper = new \Webgen\Webgen($generator);

		foreach($finder->from($inputDirectory)
			->exclude('.git') as $filePath => $fileInfo)
		{
			$filename = $fileInfo->getFilename();
			if ($filename[0] === '@') {
				\Cli\Cli::log("[ignored] $filePath");
				continue;
			}
			\Cli\Cli::log($filePath);
			$generator->generate($filePath, $fileInfo, $webgenHelper);
		}

		// Save datetime of build
		if ($config['output']['lastBuildInfo'])
		{
			\Cli\Cli::log("Saving last build infos...");
			\WebGen\Generator::setLastBuildDate($dir . '/lastBuild.dat', new DateTime);
		}


		\Cli\Cli::log("Done.\n");

	}
	catch(Exception $e)
	{
		\Cli\Cli::error("\nFatal error [" . get_class($e) . "]:\n  " . $e->getMessage() . "\n\n  file: {$e->getFile()}\n  line: {$e->getLine()}\n");
		exit(1);
	}

